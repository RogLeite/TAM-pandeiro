# -*- coding: utf-8 -*-
"""BeatClassifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1e4G6jRCZobJUTws-GcyXuDUEkK6eZ5xV
"""

from sklearn import metrics
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split
from statistics import mean, stdev

def KNNClassify(x_train, y_train, x_test, y_test, n_neighbors=5):
  """
  Treina um modelo KNeighborsClassifier com n_neighbors e retorna a acurácia
  e o modelo
  """
  knn = KNeighborsClassifier(n_neighbors=n_neighbors)
  knn.fit(x_train, y_train)
  y_predict = knn.predict(x_test)
  knn.fit(x_train, y_train)
  y_predict = knn.predict(x_test)
  return metrics.accuracy_score(y_test, y_predict), knn

def KNNTester(dataset, max_neighbors=11, proportion_test=0.3):
  """
  Gera modelos de [1, max_neighbors) vizinhos e treina com o dataset dividido 
  na proporção propotion_test, quardando as acurácias e retornando-as
  """
  assert(dataset)
  x_train, x_test, y_train, y_test = train_test_split(dataset["data"],\
                                                      dataset["target"],\
                                                      test_size=proportion_test)

  passada = {"maximo":{"k":0, "acc":0.0}, "ks":[]}
  for k in range(1,max_neighbors):
    acc, model = KNNClassify(x_train, y_train, x_test, y_test, n_neighbors=k)
    passada["ks"].append({"k":k, "acc":acc})
    if passada["maximo"]["acc"] < acc:
        passada["maximo"]["acc"] = acc
        passada["maximo"]["k"] = k
  return passada

def KNNTestKs(dataset, proportion_test=0.3, n=20, max_neighbors=11):
  """
  Executa KNNTester n vezes, acumulando seus resultados e retorna as 
  estatísticas calculadas para [1, max_neighbors) vizinhos.
  """
  assert n>0
  todas_passadas = []
  for i in range(0,n):
    todas_passadas.append(KNNTester(dataset=dataset,
                                    proportion_test=proportion_test,
                                    max_neighbors=max_neighbors))

  estatistica = []

  for k in range(1,10):
    lista = [ k_val["acc"] for elem in todas_passadas for k_val in elem["ks"] if k_val["k"]==k]
    media = mean(lista)
    desvio_padrao = stdev(lista)
    estatistica.append({"k":k, "mean":media, "stdev":desvio_padrao})

  return estatistica